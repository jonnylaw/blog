[
  {
    "path": "posts/2021-01-24-neural-networks-from-scratch/",
    "title": "Neural Networks in R",
    "description": "This post explores how to create a simple neural network to learn a linear function and a non-linear function using both standard R and the Torch library for R.",
    "author": [
      {
        "name": "Jonny Law",
        "url": {}
      }
    ],
    "date": "2021-02-02",
    "categories": [],
    "contents": "\nIn this post we will see how to train a neural network model using R and the Torch R library which is a port of the Python torch library without dependencies on Python. Torch provides tensors (n-dimensional arrays), automatic differentiation of tensors, optimisation routines and additional helpers for common deep learning tasks such as computer vision and audio processing.\nA neural network is built of layers. A layer consists of a set of weights, which are the parameters of the layer and an activation function (this can have additional parameters too). A single layer looks like the linear predictor in a generalised linear model,\n\\[\n\\eta = g(x^Tw),\n\\]\nwhere \\(\\eta\\) is the linear predictor, \\(g\\) is the linking function and \\(w\\) represent the coefficients of the covariates \\(x\\). In machine learning, \\(x\\) is referred to simply as the input, \\(w\\) are the weights and \\(g\\) is the activation function. There is often an additional parameter, termed the intercept in generalised linear models and the bias in machine learning. This can be rolled in to the weight vector by appending a one to the input / covariates. We can encapsulate this logic in a function\n\n\n\nWe also require a loss function, to understand how well our model is fitting to the data. For a regression problem we can use squared loss.\n\n\n\nWe will define a simple linear regression problem, our observations are noisy observations of a straight line.\n\\[y \\sim \\mathcal{N}(x^Tw, 2.0)\\]\n\n\n\nWe wish to learn the relationship between the inputs \\(x\\) and the outputs \\(y\\) using the model. To understand how well the model fits the observed data, we make a prediction by passing an observed input to the model (which is defined as a single layer), then we calculate how far the prediction is from the observed output using the squared loss function. The activation function is linear, or the identity function (function(x) x).\n\n[1] 4636.292\n\nTo find the best fit for this model to the observed data, we need to manipulate the weights to reduce the loss function. We can think of the weights as parameterising a family of related models, some of which may fit the data well.\nOptimisation\nTo find the maximum of a function in calculus, we first calculate the derivative and determine the point at which the slope is equal to zero. This can find both maximums and minimums, so we can additionally calculate the second derivative and if it’s negative then we have a maximum. This is fine for linear optimisation, however when it comes to non-linear optimisation we have to be more creative. We can use gradient descent to take steps in the opposite direction of the gradient to find the minimum of a non-linear function\n\n\n\nWe must calculate the derivative of the network with respect to the weight parameters. For a single layer network with univariate inputs, a linear activation function and a squared loss function the derivative is\n\\[\\frac{d \\text{ network}}{dw} = \\frac{d}{dw} (y - x^Tw)^2 = -2x^T(y-x^Tw).\\]\nWe can encapsulate this derivative as a function.\n\n\n\nWe can check the analytically calculated gradient using Torch. First we use our calculation of the gradient.\n\n          [,1]\n[1,] -1.642829\n[2,] 12.982338\n\nThen we must write the forward function of the model, pred and calculate the loss using the functions available on Torch tensors. We can then call backward() which performs reverse mode automatic differentiation then we can access the grad attribute of any tensor which has requires_grad = TRUE.\n\ntorch_tensor\n -1.6428\n 12.9823\n[ CPUFloatType{2,1} ]\n\nWe can fit this simple model by writing a training loop which updates the parameters using gradient descent. We keep track of the loss function at each iteration of gradient descent and plot it.\n\n\nobserved <- tibble(x, y) %>%\n  sample_n(50)\n\n\n\n\n\n\n\n\n\nSince this model is so small, consisting of only two weights. We can plot the actual function learned by the model using geom_abline.\n\n\n\nWe can try to use this model on a simple non-linear regression problem, of course we probably won’t do very well here! We define the regression problem as\n\\[y \\sim \\mathcal{N}(4\\sin(x), 1^2).\\]\nWe plot the true function and the observed values in red below.\n\n\n\n\n\n\nWe can then plot the learned function against the observed values and the true function. We can see that a straight line is not a good fit for this data, we need more flexibility in the network.\n\n\n\nUsing Torch\nIf we want to approximate a non-linear function we best use non-linear activation functions. We can calculate the derivative of each layer using automatic differentiation. We will use the R Torch library. We now initialise a torch tensor with the same values as x and pass it through the layers. We must re-write the layer and loss functions assuming the input is a torch_tensor. First we will re-write the linear example using Torch\n\nEpoch:  10    Loss:  14.4406 \nEpoch:  20    Loss:  11.96882 \nEpoch:  30    Loss:  9.946082 \nEpoch:  40    Loss:  8.290812 \nEpoch:  50    Loss:  6.936248 \nEpoch:  60    Loss:  5.82776 \nEpoch:  70    Loss:  4.920643 \nEpoch:  80    Loss:  4.178314 \nEpoch:  90    Loss:  3.570836 \nEpoch:  100    Loss:  3.073709 \nEpoch:  110    Loss:  2.666891 \nEpoch:  120    Loss:  2.333973 \nEpoch:  130    Loss:  2.06153 \nEpoch:  140    Loss:  1.838578 \nEpoch:  150    Loss:  1.656125 \nEpoch:  160    Loss:  1.506814 \nEpoch:  170    Loss:  1.384626 \nEpoch:  180    Loss:  1.284632 \nEpoch:  190    Loss:  1.202802 \nEpoch:  200    Loss:  1.135835 \n\n\n\n\nTry the non-linear example with multiple layers and a non-linear activation function from the first layer (where the input goes). We’ll also try a different optimizer, Adam.\n\nEpoch:  10    Loss:  6.140106 \nEpoch:  20    Loss:  3.720547 \nEpoch:  30    Loss:  1.626933 \nEpoch:  40    Loss:  0.8014324 \nEpoch:  50    Loss:  0.7821485 \nEpoch:  60    Loss:  0.744305 \nEpoch:  70    Loss:  0.6969191 \nEpoch:  80    Loss:  0.6660977 \nEpoch:  90    Loss:  0.6414019 \nEpoch:  100    Loss:  0.6172391 \n\nWe can plot the predictions alongside the observed values and the true function.\n\n\n\n\n\n\n",
    "preview": "posts/2021-01-24-neural-networks-from-scratch/neural-networks-from-scratch_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2021-02-02T09:54:12+00:00",
    "input_file": "neural-networks-from-scratch.utf8.md",
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2020-05-01-hidden-markov-model/",
    "title": "Functional Programming and Hidden Markov Models",
    "description": {},
    "author": [
      {
        "name": "Jonny Law",
        "url": {}
      }
    ],
    "date": "2020-05-01",
    "categories": [
      "Bayesian",
      "R"
    ],
    "preview": "posts/2020-05-01-hidden-markov-model/distill-preview.png",
    "last_modified": "2020-07-30T08:18:13+01:00",
    "input_file": {},
    "preview_width": 831,
    "preview_height": 303
  },
  {
    "path": "posts/2020-04-19-multi-state-survival-models/",
    "title": "Multi State Models",
    "description": {},
    "author": [
      {
        "name": "Jonny Law",
        "url": {}
      }
    ],
    "date": "2020-04-19",
    "categories": [
      "R",
      "Bayesian"
    ],
    "preview": "posts/2020-04-19-multi-state-survival-models/distill-preview.png",
    "last_modified": "2020-07-30T11:57:36+01:00",
    "input_file": {},
    "preview_width": 769,
    "preview_height": 216
  },
  {
    "path": "posts/2020-03-17-tidy-tuesday-the-office/",
    "title": "Tidy Tuesday: The Office",
    "description": {},
    "author": [
      {
        "name": "Jonny Law",
        "url": {}
      }
    ],
    "date": "2020-03-17",
    "categories": [
      "tidy-tuesday",
      "R",
      "Bayesian"
    ],
    "preview": "posts/2020-03-17-tidy-tuesday-the-office/distill-preview.png",
    "last_modified": "2020-07-30T08:18:13+01:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2020-03-10-tidy-tuesday-us-tuition-data/",
    "title": "Tidy Tuesday: US Tuition Data",
    "description": {},
    "author": [
      {
        "name": "Jonny Law",
        "url": {}
      }
    ],
    "date": "2020-03-10",
    "categories": [
      "tidy-tuesday",
      "R"
    ],
    "preview": "posts/2020-03-10-tidy-tuesday-us-tuition-data/distill-preview.png",
    "last_modified": "2020-07-30T08:18:13+01:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2020-03-04-harrier_league_data/",
    "title": "Releasing Harrier League Data",
    "description": {},
    "author": [
      {
        "name": "Jonny Law",
        "url": {}
      }
    ],
    "date": "2020-03-04",
    "categories": [
      "R"
    ],
    "preview": "posts/2020-03-04-harrier_league_data/distill-preview.png",
    "last_modified": "2020-07-30T08:18:13+01:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2020-03-03-tidy_tuesday_nhl_data/",
    "title": "Tidy Tuesday: NHL Goalscorers",
    "description": {},
    "author": [
      {
        "name": "Jonny Law",
        "url": {}
      }
    ],
    "date": "2020-03-03",
    "categories": [
      "R",
      "tidy-tuesday"
    ],
    "preview": "posts/2020-03-03-tidy_tuesday_nhl_data/distill-preview.png",
    "last_modified": "2020-07-30T13:48:11+01:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2019-11-04-parsing-strava/",
    "title": "Analysing .fit files in R",
    "description": {},
    "author": [
      {
        "name": "Jonny Law",
        "url": {}
      }
    ],
    "date": "2019-11-04",
    "categories": [
      "R"
    ],
    "preview": "posts/2019-11-04-parsing-strava/distill-preview.png",
    "last_modified": "2020-07-30T08:18:13+01:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2019-08-05-ad_r/",
    "title": "Forward Mode AD in R",
    "description": {},
    "author": [
      {
        "name": "Jonny Law",
        "url": {}
      }
    ],
    "date": "2019-08-05",
    "categories": [
      "R"
    ],
    "preview": {},
    "last_modified": "2020-07-30T08:18:13+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2019-07-31-hmc/",
    "title": "Hamiltonian Monte Carlo in R",
    "description": {},
    "author": [
      {
        "name": "Jonny Law",
        "url": {}
      }
    ],
    "date": "2019-07-31",
    "categories": [
      "R",
      "Bayesian"
    ],
    "preview": "posts/2019-07-31-hmc/distill-preview.png",
    "last_modified": "2020-07-30T16:48:08+01:00",
    "input_file": "hmc.utf8.md",
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2019-06-14-bayesian-linear-regression/",
    "title": "Bayesian Linear Regression with Gibbs Sampling in R",
    "description": {},
    "author": [
      {
        "name": "Jonny Law",
        "url": {}
      }
    ],
    "date": "2019-06-14",
    "categories": [
      "R",
      "Bayesian"
    ],
    "preview": "posts/2019-06-14-bayesian-linear-regression/distill-preview.png",
    "last_modified": "2020-07-30T11:46:56+01:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2019-04-16-multi-armed-bandits/",
    "title": "Multi-armed Bandits in Scala",
    "description": {},
    "author": [
      {
        "name": "Jonny Law",
        "url": {}
      }
    ],
    "date": "2019-04-16",
    "categories": [
      "Scala"
    ],
    "preview": "posts/2019-04-16-multi-armed-bandits/distill-preview.png",
    "last_modified": "2020-07-30T13:45:12+01:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2019-04-15-scala-and-jupyter-notebook-with-almond/",
    "title": "Scala and Jupyter Notebook with Almond",
    "description": {},
    "author": [
      {
        "name": "Jonny Law",
        "url": {}
      }
    ],
    "date": "2019-04-15",
    "categories": [
      "Scala"
    ],
    "preview": "posts/2019-04-15-scala-and-jupyter-notebook-with-almond/distill-preview.png",
    "last_modified": "2020-07-30T11:46:44+01:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2019-02-25-rejection_sampling/",
    "title": "Bayesian Inference using rejection sampling",
    "description": {},
    "author": [
      {
        "name": "Jonny Law",
        "url": {}
      }
    ],
    "date": "2019-02-25",
    "categories": [
      "R",
      "Bayesian"
    ],
    "preview": "posts/2019-02-25-rejection_sampling/distill-preview.png",
    "last_modified": "2020-07-30T11:46:40+01:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2019-02-25-sampling/",
    "title": "Sampling from a distribution with a known CDF",
    "description": {},
    "author": [
      {
        "name": "Jonny Law",
        "url": {}
      }
    ],
    "date": "2019-02-25",
    "categories": [
      "R"
    ],
    "preview": "posts/2019-02-25-sampling/distill-preview.png",
    "last_modified": "2020-07-30T11:46:41+01:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2019-02-22-national_xc/",
    "title": "A Statistical Model for Finishing Positions at the National Cross Country",
    "description": {},
    "author": [
      {
        "name": "Jonny Law",
        "url": {}
      }
    ],
    "date": "2019-02-22",
    "categories": [
      "R"
    ],
    "preview": "posts/2019-02-22-national_xc/distill-preview.png",
    "last_modified": "2020-07-30T13:47:03+01:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2019-02-11-metropolis_r/",
    "title": "Efficient Markov chain Monte Carlo in R with Rcpp",
    "description": {},
    "author": [
      {
        "name": "Jonny Law",
        "url": {}
      }
    ],
    "date": "2019-02-11",
    "categories": [
      "R",
      "Bayesian"
    ],
    "preview": "posts/2019-02-11-metropolis_r/distill-preview.png",
    "last_modified": "2020-07-30T11:56:45+01:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2017-10-26-harrier-league-cross-country/",
    "title": "Harrier League Cross Country",
    "description": {},
    "author": [
      {
        "name": "Jonny Law",
        "url": {}
      }
    ],
    "date": "2017-10-26",
    "categories": [
      "R"
    ],
    "preview": {},
    "last_modified": "2020-07-30T11:43:29+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2017-04-23-BreezeMcmc/",
    "title": "MCMC with Scala Breeze",
    "description": {},
    "author": [
      {
        "name": "Jonny Law",
        "url": {}
      }
    ],
    "date": "2017-04-23",
    "categories": [
      "Scala",
      "Bayesian"
    ],
    "preview": "posts/2017-04-23-BreezeMcmc/distill-preview.png",
    "last_modified": "2020-07-30T11:43:25+01:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2017-02-21-AkkaClient/",
    "title": "An Akka HTTP Client with JSON Parsing",
    "description": {},
    "author": [
      {
        "name": "Jonny Law",
        "url": {}
      }
    ],
    "date": "2017-02-21",
    "categories": [
      "Scala"
    ],
    "preview": {},
    "last_modified": "2020-07-30T11:43:22+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2017-01-04-FailureInFunctionalProgramming/",
    "title": "Using Monads for Handling Failures and Exceptions",
    "description": {},
    "author": [
      {
        "name": "Jonny Law",
        "url": {}
      }
    ],
    "date": "2017-01-04",
    "categories": [
      "Scala"
    ],
    "preview": {},
    "last_modified": "2020-07-30T11:43:21+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2016-12-13-SeasonalDlm/",
    "title": "Seasonal DLM",
    "description": {},
    "author": [
      {
        "name": "Jonny Law",
        "url": {}
      }
    ],
    "date": "2016-12-13",
    "categories": [
      "Bayesian",
      "Scala"
    ],
    "preview": "posts/2016-12-13-SeasonalDlm/distill-preview.png",
    "last_modified": "2020-07-30T11:43:20+01:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2016-12-12-KalmanFilter/",
    "title": "The Kalman Filter in Scala",
    "description": {},
    "author": [
      {
        "name": "Jonny Law",
        "url": {}
      }
    ],
    "date": "2016-12-12",
    "categories": [
      "Scala"
    ],
    "preview": "posts/2016-12-12-KalmanFilter/distill-preview.png",
    "last_modified": "2020-10-27T14:19:38+00:00",
    "input_file": "KalmanFilter.utf8.md",
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2016-12-01-PracticalAkkaStreams/",
    "title": "Practical Introduction to Akka Streaming",
    "description": {},
    "author": [
      {
        "name": "Jonny Law",
        "url": {}
      }
    ],
    "date": "2016-12-01",
    "categories": [
      "Scala"
    ],
    "preview": {},
    "last_modified": "2020-07-30T11:43:16+01:00",
    "input_file": {}
  }
]
