{
  "hash": "e72c0c386309d1aa59e950b1ceae0f7f",
  "result": {
    "markdown": "---\ntitle: \"Efficient Markov chain Monte Carlo in R with Rcpp\"\nauthor: \"Jonny Law\"\ndate: '2019-02-11'\nslug: efficient_mcmc_using_rcpp\ncategories:\n  - [R, Bayesian]\n---\n\n\n\n\n# Bivariate Normal Model\n\nThis post considers how to implement a simple Metropolis scheme to determine the parameter posterior distribution of a bivariate Normal distribution. The implementation is generic, using higher-order-functions and hence can be re-used with new algorithms by specifying the un-normalised log-posterior density and a proposal distribution for the parameters. The built-in `parallel` package is used fit multiple chains in parallel, finally the Metropolis algorithm is reimplemented in C++ using Rcpp which seemlessly integrates with R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbivariate_normal <- function(theta, n) {\n  mu1 <- theta[1]\n  sigma1 <- theta[2]\n  mu2 <- theta[3]\n  sigma2 <- theta[4]\n  x <- rnorm(n / 2, mean = mu1, sd = sigma1)\n  y <- rnorm(n / 2, mean = mu2, sd = sigma2)\n  tibble(x, y)\n}\n\ntheta <- c(5.0, 0.5, 2.0, 1.5)\nsims <- bivariate_normal(theta, 1000)\nxs <- as.matrix(sims)\nggplot(sims, aes(x, y)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nThe random variables in the model can be written as:\n\n\n$$p(y,\\mu, \\Sigma) = p(\\mu)p(\\Sigma)\\prod_{i=1}^N\\mathcal{N}(y_i;\\mu, \\Sigma)$$\n\nThe covariance matrix is diagonal, hence the log-likelihood can be written as the sum of two univariate normal distributions:\n\n$$\\log p(y|\\mu, \\Sigma) = \\sum_{j=1}^2\\left(-\\frac{N}{2}\\log(2\\pi\\sigma_j^2) - \\frac{1}{2\\sigma_j^2}\\sum_{i=1}^N(y_{ij}-\\mu_j)^2\\right)$$\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_likelihood <- function(xs, theta) {\n  apply(xs, 1, function(x) dnorm(x[1], mean = theta[1], sd = theta[2], log = T) + \n          dnorm(x[2], mean = theta[3], sd = theta[4], log = T)) %>% sum()\n}\n```\n:::\n\n\nThe prior distributions are chosen to be:\n\n\n$$\\begin{align}\np(\\mu_j) &= \\mathcal{N}(0, 3), \\\\\np(\\Sigma_{jj}) &= \\textrm{Gamma}(3, 3), \\quad j = 1, 2.\n\\end{align}$$\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_prior <- function(theta) {\n  dnorm(theta[1], log = T) + \n    dnorm(theta[3], log = T) + \n    dgamma(theta[2], shape = 3.0, rate = 3.0, log = T) + \n    dgamma(theta[4], shape = 3.0, rate = 3.0, log = T)\n}\nlog_posterior <- function(xs) \n  function(theta) \n    log_likelihood(xs, theta) + log_prior(theta)\n```\n:::\n\n# Metropolis-Hastings algorithm\n\nA [Metropolis-Hastings](https://en.wikipedia.org/wiki/Metropolisâ€“Hastings_algorithm) algorithm can be used to determine the posterior distribution of the parameters, $theta = \\{\\mu, \\Sigma\\}$. The Metropolis algorithm constructs a Markov chain whose stationary distribution corresponds to the target posterior distribution, $p(\\theta|y)$. In order to construct the Markov chain with this property, a carefully chosen tansition function $P(\\theta^\\prime|\\theta)$ is used. In order to prove the Metropolis algorithm has the target distribution as its stationary distribution, the existence and uniqueness of the stationary distribution must be determined. A transition function which satisfies detailed balance is chosen which is a sufficient condition for the existence of the stationary distribution:\n\n$$P(\\theta^\\prime|\\theta)p(\\theta|y) = P(\\theta|\\theta^\\prime)p(\\theta^\\prime|y)$$\n\n\nThe Markov chain proceeds by proposing a new value of the parameters, $\\theta^\\prime$ from a distribution which can be easily simulated from (typically a Normal distribution centred at the previously accepted value of the parameter, $\\theta$), $q(\\theta^\\prime|\\theta)$. The transition function is the product of the proposal distribution and the acceptance ratio. The acceptance ration which satisfies detailed balance is called the Metropolis choice:\n\n\n$$A = \\operatorname{min}\\left(1, \\frac{p(\\theta^\\prime|y)q(\\theta|\\theta^\\prime)}{p(\\theta|y)q(\\theta^\\prime|\\theta)}\\right).$$\n\n# R Implementation\n\nFirst of a single step of the Metropolis algorithm is implementated. This is a higher order function, since two of the arguments are functions themselves. The function `log_posterior` is a function from parameters to log-likelihood and the `proposal` is a symmetric proposal distribution for the parameters, a function from parameters to parameters. The final argument, `theta` represents the parameters.\n\n::: {.cell}\n\n```{.r .cell-code}\nmetropolis_step <- function(theta, log_posterior, proposal) {\n  propTheta <- proposal(theta)\n  a <- log_posterior(propTheta) - log_posterior(theta)\n  u <- runif(1)\n  if (log(u) < a) {\n    propTheta\n  } else {\n    theta\n  }\n}\n```\n:::\n\nNext the step function can be used in a for loop to generate m samples, each dependent on the previous step. An matrix containing $m$ rows is initialised to contain each iteration of the Metropolis algorithm.\n\n::: {.cell}\n\n```{.r .cell-code}\nmetropolis <- function(theta, log_posterior, proposal, m) {\n  out = matrix(NA_real_, nrow = m, ncol = length(theta))\n  out[1, ] = theta\n  for (i in 2:m) {\n    out[i, ] <- metropolis_step(out[i-1, ], log_posterior, proposal)\n  }\n  out\n}\n```\n:::\n\nThe strictly positive variance parameters are proposed on the log-scale:\n\n::: {.cell}\n\n```{.r .cell-code}\nproposal <- function(x) {\n  z = rnorm(4, sd = 0.05)\n  c(x[1] + z[1], x[2] * exp(z[2]),\n    x[3] + z[3], x[4] * exp(z[4]))\n}\n```\n:::\n\nFinally, all the components are there to sample from the posterior distribution of the parameters. The mean of the sampled posterior distribution should coincide with the parameters used to simulate the data. In the figure below the actual values used to simulate the data are plotted with dashed lines.\n\n::: {.cell hash='index_cache/html/metropolis-serial_269260f51b7d8f07b73abfcc1d1c7e5c'}\n\n```{.r .cell-code}\nout = metropolis(theta, log_posterior(xs), proposal, 10000)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n# Parallel Chains in R\n\nTypically, multiple chains are run in parallel, a straightforward way to do this in R is to use a parallel map from the [furrr](https://davisvaughan.github.io/furrr/) package. First we create a new function which alters the `metropolis` function to return a dataframe: \n\n::: {.cell}\n\n```{.r .cell-code}\nmetropolis_df <- function(theta, log_posterior, proposal, m, parameter_names) {\n  function(x) {\n    mat <- metropolis(theta, log_posterior, proposal, m)\n    colnames(mat) <- parameter_names\n    as.data.frame(mat)\n  }\n}\n```\n:::\n\nThen `future_map_dfr` is used which performs the function `.f` for each element of `.x`. It then rowbinds into a dataframe. This is explicit in the function name, the suffix `_dfr` meaning a dataframe is the return type and is created by rowbinding the results. The `id` of each function run is provided by the `.id` column and takes on the values of `.x`.\n\n::: {.cell hash='index_cache/html/metropolis-r_cdde723e10a66f30d65675cb1eaf7eb6'}\n\n```{.r .cell-code}\nplan(multiprocess)\nmh_samples <- future_map_dfr(\n  .x = 1:2,\n  .f = metropolis_df(theta, log_posterior(xs), proposal, 10000, actual_values$parameter),\n  .id = \"chain\"\n)\n```\n:::\n\nThe figure below shows the trace plots and marginal densities from 10,000 draws of the parallel Metropolis hastings algorithm.\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/parallel-diagnostics-1.png){width=672}\n:::\n:::\n\n# Rcpp implementation\n\nR has a straightforward interface to C++, the Metropolis-Hastings algorithm can be re-implemented using C++. C++ is a statically typed imperative language, hopefully the effort of reimplementing in C++ will result in a significant speed-up. The `log_posterior` and `proposal` functions are run many times to calculate the Markov chain. Let's first implement these two functions using C++:\n\n::: {.cell}\n\n```{.rcpp .cell-code}\n#include <Rcpp.h>\nusing namespace Rcpp;\n// [[Rcpp::plugins(cpp11)]]\n\n// [[Rcpp::export]]\ndouble logDensity(NumericMatrix ys, NumericVector p) {\n  double ll = 0;\n  int n = ys.nrow();\n  for (int i = 0; i < n; i++) {\n    ll += R::dnorm(ys(i, 0), p(0), p(1), true) + R::dnorm(ys(i, 1), p(2), p(3), true);\n  }\n  return ll;\n}\n\n// [[Rcpp::export]]\nNumericVector proposalCpp(NumericVector p, double delta) {\n  int d = p.size();\n  NumericVector z(d);\n  NumericVector propP(d);\n  for (int i = 0; i < d; i++) {\n    propP(i) = p(i);\n    z(i) = R::rnorm(0, delta);\n  }\n  propP(0) += z(0);\n  propP(1) *= exp(z(1));\n  propP(2) += z(2);\n  propP(3) *= exp(z(3));\n  return propP;\n}\n```\n:::\n\nThese functions can then be used in the Metropolis algorithm written using R, as we can see from the below code chunk the C++ function appears as if it was an R function.\n\n::: {.cell hash='index_cache/html/metropolis-cpp_83416b085382f5c05fca7c2ebf08530b'}\n\n```{.r .cell-code}\nout_cpp <- metropolis(theta, function(p) logDensity(xs, p), function(p) proposalCpp(p, 0.05), 10000)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n# Performance Improvements\n\nBut what about the performance, the relative speedup can be calculated using the [bench](http://bench.r-lib.org/) package. The plot below shows the absolute timings of the R implementation and the Rcpp implementation.\n\n::: {.cell hash='index_cache/html/unnamed-chunk-10_4e612dc367b1cd5b703a2305189fe6b3'}\n\n```{.r .cell-code}\ntimings <-\n  bench::mark(\n    R = metropolis(theta, log_posterior(xs), proposal, 100),\n    Rcpp = metropolis(theta, function(p)\n      logDensity(xs, p),\n      function(p)\n        proposalCpp(p, 0.05), 100),\n    iterations = 500,\n    check = FALSE\n  )\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/meteropolis-iteration-timing-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}