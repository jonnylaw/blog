{
  "hash": "123f66957e503fe6f9659a07d290fad1",
  "result": {
    "markdown": "---\ntitle: 'Bayesian Inference for an SIR Model'\nauthor: Jonny Law\ndate: '2020-03-27'\nslug: bayesian-inference-for-an-sir-model\ncategories:\n  - [R, Bayesian]\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyr' was built under R version 4.1.2\n```\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'dplyr' was built under R version 4.1.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(readr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'readr' was built under R version 4.1.2\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(jonnylaw)\nlibrary(deSolve)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'deSolve' was built under R version 4.1.2\n```\n:::\n\n```{.r .cell-code}\nlibrary(patchwork)\ntheme_set(theme_minimal())\n```\n:::\n\n\n[Johns Hopkins University](https://github.com/CSSEGISandData/COVID-19) have put together a repository containing confirmed cases of COVID19, deaths and recovered patients. Below we plot the confirmed cases, confirmed recovered and deaths.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\nJoining, by = c(\"province_state\", \"country_region\", \"lat\", \"long\", \"date\")\nJoining, by = c(\"province_state\", \"country_region\", \"lat\", \"long\", \"date\")\n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Transformation introduced infinite values in continuous y-axis\nTransformation introduced infinite values in continuous y-axis\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=768}\n:::\n:::\n\n\n## SIR Model\n\nThe system of ordinary differential equations (ODE) for the Susceptible Infected Recovered (SIR) model is given by\n\n\n$$\\begin{align}\n& \\frac{dS}{dt} = - \\frac{\\beta I S}{N}, \\\\\n& \\frac{dI}{dt} = \\frac{\\beta I S}{N}- \\gamma I, \\\\\n& \\frac{dR}{dt} = \\gamma I,\\\\\n& N = S + I + R.\n\\end{align}$$\n\nWhere $S$ is the number of susceptible, $I$ the total infected and $R$ the total recovered. $\\gamma$ is the recovery rate ($1/\\gamma$ is the infectious period), $\\beta$ is the infection rate ($1/\\beta$ is the time between contacts). These parameters are unobserved.\n\nWe can Use `deSolve` to solve the ODE system startin with an initial state of 66.4 million people susceptible and one infected. This produces a simulation conditional on the parameters chosen. The parameters can change depending on each countries reaction to the virus. For instance the infection rate can be lowered by quarantine or social distancing, thus reducing the contact rate $\\beta$.\n\n::: {.cell}\n\n```{.r .cell-code}\nparameters <- c(beta = 0.5, gamma = 1/4.5)\ninitial_state <- c(S = 66.4e6, I = 1, R = 0) \n\nsir <- function(t, state, parameters) {\n  with(as.list(c(state, parameters)), {\n    N <- sum(S, I, R)\n    dS = -beta * S * I / N\n    dI = beta * S * I / N - gamma * I\n    dR = gamma * I\n    \n    list(c(dS, dI, dR))\n  })  \n}\n\ntimes <- seq_len(100)\nout <- ode(y = initial_state, times = times, func = sir, parms = parameters)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\nDon't know how to automatically pick scale for object of type deSolve/matrix. Defaulting to continuous.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\nConsider the model in [this pre-print from Lourenco et al 2020](https://www.dropbox.com/s/oxmu2rwsnhi9j9c/Draft-COVID-19-Model%20%2813%29.pdf), which has since been criticised in [this response](https://www.bmj.com/content/bmj/368/bmj.m1216.full.pdf). We observe the cumulative deaths\n\n$$\\Lambda_t = \\rho\\eta R_{t-\\psi},$$\n\n\nwhere $\\rho$ is the proportion of the population at risk of severe disease, $\\eta$ is the probability of dying with the severe disease. $R_{t-\\psi}$ is the removed population with a delay between the time of infection represented by $\\psi$. The parameters are given prior distributions in the paper, we can simulate multiple trajectories of the cumulative deaths by first simulating from the prior distribution then solving the SIR system. The prior distributions as given in the paper are\n\n\n$$\\begin{aligned}\n  \\frac{1}{\\gamma} &\\sim \\mathcal{N}(4.5, 1^2), \\\\\n  \\psi &\\sim \\mathcal{n}(17, 2^2), \\\\\n  R_0 &\\sim \\mathcal{n}(2.25, 0.2^2), \\\\\n  \\eta &\\sim \\mathcal{n}(0.14, 0.007^2), \\\\\n  \\rho &\\sim \\text{Gamma}(5, 5/0.01).\n\\end{aligned}$$\n\nThere is also a parameter for the time of introduction relative to the time of the first reported case, $\\tau$. It has a strange prior distribution, being uniform from $-\\infty$ to $\\infty$. Obviously this parameter can not be positive, since a confirmed case indicates that the time of introduction is in the past.\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\nWe can simulate more times from the prior and calculate the empirical intervals instead of plotting raw trajectories. The initial state is $S = 66.44 \\times 10^6$, $I = 1$ and $R = 0$. The initial time is taken to be one week before the first confirmed case in the UK.\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Transformation introduced infinite values in continuous y-axis\nTransformation introduced infinite values in continuous y-axis\nTransformation introduced infinite values in continuous y-axis\nTransformation introduced infinite values in continuous y-axis\nTransformation introduced infinite values in continuous y-axis\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n## Inference method\n\nThe inference method is explained clearly in [LourenÃ§o et al (2017)](https://elifesciences.org/articles/29820), albeit with a different model. The Metropolis algorithm with a symmetric random walk proposal distribution is used, the likelihood is the product of independent Poisson distributions\n\n$$\\mathcal{L}(y_{1:T}|\\Lambda_{1:T}, \\theta^\\star) = \\prod_{t=1}^T\\left(\\textrm{Poisson}(y_t;\\Lambda_t)\\right)$$\n\n\nThe steps to perform inference for the static parameters are summarised below\n\n1. Propose new (log) parameters from a symmetric Normal distribution $\\log(\\theta^\\star) \\sim \\mathcal{N}(\\log\\theta^\\star\\mid\\log\\theta, \\sigma I_d)$\n2. Solve the ODE using the `deSolve` package using the proposed parameters\n3. Calculate the un-normalised log-posterior $\\log p(\\Lambda_{1:T}, \\theta^\\star\\mid y_{1:T}) = \\log p(\\theta) +\\sum_{t=1}^T\\log\\left(\\textrm{Poisson}(y_t\\mid\\Lambda_t)\\right)$\n3. Accept the new parameters with probability $\\alpha$ where \n\n\n$$\\alpha = \\min\\left(1, \\frac{p(\\Lambda_{1:T}, \\theta^\\star\\mid y_{1:T})}{p(\\Lambda_{1:T}, \\theta\\mid y_{1:T})}\\right).$$ \n\nFirst we specify the likelihood in R.\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_likelihood_sir <- function(parameters, ys, initial_state) {\n  initial_state <- c(S = 60e6, I = 1, R = 0) # \n  \n  # Transition function\n  sir <- function(t, state, parameters) {\n    beta <- parameters[1] * parameters[2]\n    gamma <- parameters[2]\n    \n    with(as.list(state), {\n      N <- sum(S, I, R)\n      dS = -beta * S * I / N\n      dI = beta * S * I / N - gamma * I\n      dR = gamma * I\n      \n      list(c(dS, dI, dR))\n    })  \n  }\n  \n  sir_sim <-\n    deSolve::ode(\n      y = initial_state,\n      times = seq_along(ys),\n      func = sir,\n      parms = parameters\n    )\n  \n  cumulative_deaths <- function(t, R, parameters) {\n    R[max(1, t - parameters[5])] * parameters[3] * parameters[4]\n  }\n  \n  lambdas <- purrr::map_dbl(sir_sim[, 1], ~ cumulative_deaths(t = .x, sir_sim[, 4], parameters))\n  \n  ll <- sum(dpois(x = ys, lambda = lambdas, log = TRUE))\n  \n  if_else(is.nan(ll) || is.na(ll), -Inf, ll)\n}\n```\n:::\n\nThen we specify the prior distributions.\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_prior <- function(parameters) {\n  r0 = parameters[1]; gamma = parameters[2]; rho = parameters[3]\n  eta = parameters[4]; psi = parameters[5]\n  \n  dnorm(1/gamma, mean = 4.5, sd = 1, log = TRUE) +\n    dnorm(psi, mean = 17, sd = 2, log = TRUE) +\n    dnorm(r0, mean = 2.25, sd = 0.2, log = TRUE) +\n    dnorm(eta, mean = 0.14, sd = 0.007, log = TRUE) +\n    dgamma(rho, shape = 5, rate = 5/0.01, log = TRUE)\n}\n\nproposal <- function(p) {\n  p * exp(rnorm(5, sd = c(0.02, 0.02, 0.02, 0.02, 0.05)))\n}\n\ninitial_parameters <- c(r0 = 2.25, gamma = 1/4.5, rho = 0.01, eta = 0.14, psi = 17)\nys <- uk %>% pull(deaths)\n```\n:::\n\nWe initialise the parameters at the mean of the prior distributions and simulate 1 million iterations from the Metropolis algorithm. The first half are discarded and every 100th iteration is retained in an attempt to reduce auto-correlation in the chain.\n\n::: {.cell}\n\n```{.r .cell-code}\niters <-\n  jonnylaw::metropolis(\n    theta = initial_parameters,\n    function(p) log_likelihood_sir(ys = ys, parameters = p) + log_prior(p),\n    proposal = proposal,\n    1e6, \n    chains = 2, \n    parallel = TRUE\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Strategy 'multiprocess' is deprecated in future (>= 1.20.0). Instead,\nexplicitly specify either 'multisession' or 'multicore'. In the current R\nsession, 'multiprocess' equals 'multicore'.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: UNRELIABLE VALUE: Future ('<none>') unexpectedly generated random\nnumbers without specifying argument 'seed'. There is a risk that those random\nnumbers are not statistically sound and the overall results might be invalid.\nTo fix this, specify 'seed=TRUE'. This ensures that proper, parallel-safe random\nnumbers are produced via the L'Ecuyer-CMRG method. To disable this check, use\n'seed=NULL', or set option 'future.rng.onMisuse' to \"ignore\".\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: UNRELIABLE VALUE: Future ('<none>') unexpectedly generated random\nnumbers without specifying argument 'seed'. There is a risk that those random\nnumbers are not statistically sound and the overall results might be invalid.\nTo fix this, specify 'seed=TRUE'. This ensures that proper, parallel-safe random\nnumbers are produced via the L'Ecuyer-CMRG method. To disable this check, use\n'seed=NULL', or set option 'future.rng.onMisuse' to \"ignore\".\n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/traceplots-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/densities-1.png){width=672}\n:::\n:::\n\nThe next plot shows both the prior and posterior distribution. The prior is the solid black line and the posterior samples are plotted in a histogram. Most of the prior distributions are narrow and hence have resulted in little change. The posterior mean of the infectious period, $1/gamma$ is approximately 4 days, down from the prior mean of 4.5. The posterior mean of $\\psi$ is, 13.5, 3.5 days shorter than the prior mean. \n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\nNow plot the posterior cumulative death curve.\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Transformation introduced infinite values in continuous y-axis\nTransformation introduced infinite values in continuous y-axis\nTransformation introduced infinite values in continuous y-axis\nTransformation introduced infinite values in continuous y-axis\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-posterior-1.png){width=672}\n:::\n:::\n\nLet's simulate forward 100 days from the hypothesised start date, 2020-01-26 using the posterior distribution.\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}