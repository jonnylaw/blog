{
  "hash": "6ccba3d89035c7abe381e6c9ff14fb61",
  "result": {
    "markdown": "---\ntitle: Scala and Jupyter Notebook with Almond\nauthor: Jonny Law\ndate: '2019-04-15'\nslug: scala-and-jupyter-notebook-with-almond\ncategories:\n  - Scala\n---\n\n\n\n\nTypically, when programming with Scala I use a combination of [ensime](https://ensime.github.io/) in emacs, [sbt](https://www.scala-sbt.org/) and the Scala repl. However, sometimes when working on a new project which requires a lot of data exploration and graphics it is sometimes more useful to have a notebook where figures are rendered inline with descriptions of why each figure has been generated and what it shows for future reference. Jupyter notebooks have long been the standard in Python (although I prefer rmarkdown and knitr when using R). \n\nJupyter notebooks can be initialised with many different kernels to serve a wide array of users. Recently there has been a release which combines the power of the [Ammonite](https://ammonite.io/) scala repl which empowers users to write small Scala scripts where dependencies can be stored in the same script file and are fetched using coursier without the need for a large SBT project. Ammonite has many more features besides this, however scripting is one of my favourites. It also allows us to write self-contained Jupyter notebooks with dependencies by utilising Ammonite as the kernel of the Jupyter notebook using [Almond](https://almond.sh/). \n\nIn this blog, I will show you how to use Almond to fit a linear regression using the probabilistic programming language, [Rainier](https://github.com/stripe/rainier/).\n\n## Setup of Almond\n\n1. Install Jupyter Notebook using pip\n\n```bash\npython3 -m pip install --upgrade pip\npython3 -m pip install jupyter\n```\n\n2. Install Ammonite\n\n```bash\nmkdir -p ~/.ammonite && curl -L -o ~/.ammonite/predef.sc https://git.io/vHaKQ\n```\n\n2. Install Almond https://almond.sh/docs/quick-start-install\n\n3. Run jupyter notebook by running `jupyter notebook` from a terminal and create a new document in the web interface selecting the \"Scala\" kernel\n\n## Scala library dependencies\n\nAmmonite lets you import dependencies directly from Maven central using a special import syntax, for example to import the latest version of the Rainier core library simply type:\n\n```scala\nimport $ivy.`com.stripe::rainier-core:0.2.2`\n```\n\nThen all imports from the Rainier library should be available. Additionally, we want to be able to use a plotting library [Evilplot](https://github.com/cibotech/evilplot) which does not have a standard resolver. Luckily Ammonite makes adding new resolvers straightforward, simply add a new block which points to the Maven repository of cibotech. Note that this is not an especially common operation - since most OSS Scala libraries are stored in the [Maven central repository](https://search.maven.org/). \n\n```scala\nimport coursier.MavenRepository\n\ninterp.repositories() ++= Seq(MavenRepository(\n  \"http://dl.bintray.com/cibotech/public\"\n))\n```\n\nThen the plotting library can be imported, ensure this is in a new block.\n\n```scala\nimport $ivy.`com.stripe::rainier-plot:0.2.2`\n```\n\n## Building a model using rainier\n\nThe model under consideration is straightforward, a simple linear regression with unknown slope and intercept:\n\n\n$$y_i = \\alpha + \\beta x_i + \\varepsilon_i, \\quad \\varepsilon_i \\sim \\mathcal{N}(0, \\sigma^2)$$\n\nIn order to perform inference to determine the posterior distribution of the unknown parameters, $\\psi = \\{\\alpha, \\beta, \\sigma\\}$ on this model using Rainier first we simulate some data from the model:\n\n```scala\nimport com.stripe.rainier.core._\nimport com.stripe.rainier.sampler._\n\nval (alpha, beta, sigma) =  (-1.5, 2.0, 0.5)\n\nval lm = for {\n  x <- Normal(0, 1).param\n  y <- Normal(alpha + beta * x, sigma).param\n} yield (x, y)\n\nimplicit val s = RNG.default\nval sims = lm.sample(100)\n```\n\nThe code above uses rainiers sampling-based monad in order to simulate standard Normal data representing the covariates, $x_i, i = 1,\\dots,100$ and the dependent variable $y_i$. 100 $(x, y)$ pairs are simulated from the model with the selected parameter values. Now it might be of interest to plot the data using the Evilplot plotting library. Here we write out the data to a csv and use ggplot in R\n\n::: {.cell}\n\n```{.r .cell-code}\nlm_sims <- read_csv(here::here(\"notebooks/data/lm_sims.csv\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 100 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (2): x, y\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nlm_sims %>% \n  ggplot(aes(x, y)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\nThe code required to sample from the posterior distribution is similar to that required to simulate the model:\n\n```scala\nimport com.stripe.rainier.compute._\n\ndef linearModel(data: Seq[(Double, Double)]): RandomVariable[Map[String, Real]] = for {\n    alpha <- Normal(0, 5).param\n    beta <- Normal(0, 5).param\n    sigma <- LogNormal(2, 2).param\n    _ <- Predictor[Double].from { x =>\n      Normal(alpha + beta * x, sigma)\n    }\n    .fit(data)\n  } yield Map(\"alpha\" -> alpha, \"beta\" -> beta, \"sigma\" -> sigma)\n```\n\nFirst prior distributions are chosen for the static parameters, then the function `Predictor` is used to specify the likelihood for the linear regression as the Normal distribution. The data consists of a sequence of tuples. Finally to sample values from the posterior using Hamiltonian Monte Carlo with 5 leapfrog steps and auto-tuning of the leapfrog step-size using dual averaging.\n\n```scala\nval iters = linearModel(sims).sample(HMC(5), 5000, 100000, 100)\n```\n\n::: {.cell}\n\n```{.r .cell-code}\niters <- read_csv(here::here(\"notebooks/data/lm_params.csv\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 1000 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (3): alpha, beta, sigma\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\niters %>% \n  mutate(iteration = row_number()) %>% \n  gather(key = Parameter, value, -iteration) %>% \n  ggplot() +\n    geom_line(ggplot2::aes(x = iteration, y = value), alpha = 0.5) +\n    facet_wrap(~Parameter, scales = \"free_y\", strip.position = \"right\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\nThe full notebook can be viewed on Github [here](https://github.com/jonnylaw/blog/blob/master/notebooks/rainier_linear_model.ipynb).",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}