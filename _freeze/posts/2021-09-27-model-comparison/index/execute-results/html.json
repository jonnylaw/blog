{
  "hash": "adb733dc40518b5539fd23b513b19fab",
  "result": {
    "markdown": "---\ntitle: \"Model Comparison with Hierarchical Models\"\ndescription: |\n  Comparing the performance of multiple machine learning models using Bayesian Hierarchical models.\ndate: \"2021-09-27\"\nbibliography: bibliography.bib\n---\n\n\n\n\nOne common problem in machine learning is comparing models. Some choose to calculate a single metric (accuracy, ROC AUC etc.) and compare the value across several models, however fitting multiple models to the same train-test split can result in overfitting. To combat this, we can perform k-fold cross validation. Additionally, we can then use a statistical model to determine if the difference in performance between the models fit on the same k-folds is real or random variation in the sampled test sets. This post uses a method common to meta-analysis, when combining and understanding results from multiple related trials with possibly different datasets. This method has been used for comparing ML models and a detailed treatment for ML model comparison can be found in @benavoli2017time.\n\nTo evaluate the methods, we will first simulate some data. Let's consider a multiple linear regression with polynomial relationships.\n\n\n$$\n\\begin{aligned}\ny_i \\sim \\mathcal{N}(x_1 \\beta_1 + x_2^2\\beta_2 + x_3^3\\beta_3, \\sigma^2)\n\\end{aligned}\n$$\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 1000\n# Sample coefficients from standard normal\nbeta <- rnorm(3)\n# Sample variance from exponential\nsigma <- rexp(1)\nX <- matrix(rnorm(3 * n), nrow = n, byrow = TRUE)\ny <- rnorm(n = n, mean = cbind(X[,1], X[,2]^2, X[,3]^3) %*% beta, sd = sigma)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The `x` argument of `as_tibble.matrix()` must have unique column names if `.name_repair` is omitted as of tibble 2.0.0.\nUsing compatibility `.name_repair`.\nThis warning is displayed once every 8 hours.\nCall `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.\n```\n:::\n\n::: {.cell-output-display}\n![Plot of the simulated data](index_files/figure-html/plot-simulation-1.png){width=672}\n:::\n:::\n\nWe have a dataset of size $n = 1000$, we split the dataset into $k = 5$ folds by sampling 5 non-overlapping test sets. We use the `vfold_cv` function from [`rsample`](https://rsample.tidymodels.org).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsplits <- vfold_cv(df, v = 5)\n```\n:::\n\n\nNext, we propose a few candidate models. We can specify the model which is used to generate the data and a random forest which should do a good job to unpick the relationship.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel1 <- linear_reg() %>% \n  set_engine(\"lm\")\n\nrf <- rand_forest()\n```\n:::\n\n\nWe can now specify a workflow set, this includes a recipe for each model. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nwfs <- workflowsets::workflow_set(\n  preproc = list(\n    \"linear\" = y ~ .,\n    \"true\" = y ~ X1 + poly(X2, 2) + poly(X3, 3),\n    \"linear\" = y ~ .\n  ),\n  models = list(\n    linear_reg = linear_reg() %>% set_engine(\"lm\"),\n    linear_reg = linear_reg() %>% set_engine(\"lm\"),\n    rf = rand_forest(mode = \"regression\") %>% set_engine(\"ranger\")\n  ),\n  cross = FALSE\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwf_results <- workflow_map(wfs, resamples = splits, fn = \"fit_resamples\", verbose = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ni 1 of 3 resampling: linear_linear_reg\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ 1 of 3 resampling: linear_linear_reg (766ms)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni 2 of 3 resampling: true_linear_reg\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ 2 of 3 resampling: true_linear_reg (768ms)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\ni 3 of 3 resampling: linear_rf\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ 3 of 3 resampling: linear_rf (2.2s)\n```\n:::\n:::\n\n\nFigure \\@ref(fig:plot-results) (left) shows the root mean squared error (RMSE) between each models prediction and the corresponding actual value in the test set. The results appear as a box-plot since the \n\n\n$$\\text{RMSE} = \\sqrt{\\sum_{i=1}^N (y_i - f(x_i))^2}$$\n\nWhere $N$ is the number of data points in the test dataset (it's $N = 200$ in our example), $y_i$ is value of the $i^{th}$ test example and $f(x_i)$ is the prediction for the $i^{th}$ datapoint. \n\nFigure \\@ref(fig:plot-results) (right) shows the R-squared value, the proportion of explained variance. The R squared value is calculated by\n\n$$R^2 = 1 - \\frac{SS_\\text{res}}{SS_{\\text{tot}}}$$\n\n\nWhere,\n\n\n$$SS_{\\text{res}}=\\sum_{i=1}^N (y_i - f(x_i))^2,\\\\\nSS_\\text{tot} = \\sum_{i=1}^N(y_i - \\bar{y})^2.$$\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `cols` is now required when using unnest().\nPlease use `cols = c(info, option, result)`\n```\n:::\n\n::: {.cell-output-display}\n![Boxplot showing the results from the 5-fold cross validation for each of the three models (Left) RMSE, (Right) R-squared](index_files/figure-html/plot-results-1.png){width=672}\n:::\n:::\n\n## Hierarchical Model\n\nWe must ensure the $k$-folds we sample are identical across models. We can then use a statistical model to determine if the differences between models are real or simply random variation in the sampled test sets. To perform the comparison we consider the RMSE for each of the $k=5$ folds. $y_{ij}$, $i = 1, \\dots, k$, $j = 1, \\dots N_\\text{models}$ is the calculated root mean squared error for the $i^{th}$ fold, with the $j^{th}$ model. We use a log transformation on the RMSE, which is a positive real number, $\\mathbb{R}_{\\geq 0}$, which transforms the metric to be unconstrained on the real line $\\operatorname{log}: \\mathbb{R}_{\\geq 0} \\rightarrow \\mathbb{R}$. The outcome is then suitable to model using a Normal distribution.\n\n$$\n\n\\begin{aligned}\ny_{ij} &= \\mathcal{N}(\\mu_{ij}, \\sigma^2), \\\\\n\\mu_{ij} &= (\\beta_0 + b_i) + \\beta_1 x_{i1} + \\beta_2 x_{i2}, \\\\\nb_i &\\sim t(1), \\\\\n\\beta_j &\\sim \\mathcal{N}(0, 10), \\\\\n\\sigma &\\sim \\operatorname{Exponential}(1).\n\\end{aligned}\n\n$$\n\nThis is a random intercept model, where $b_i$ is drawn from a t-distribution with 1 degree of freedom. This means the coefficients, $\\beta_j$ will be the same across folds in each model and the difference between folds is modeled by the random intercept. For our purposes, we are not interested in the difference between folds, just the difference between the models represented by the $\\beta_j$ coefficients. The variation between the metrics for each fold will inform us how certain our posterior predictions are. Figure \\@ref(fig:performance-folds) shows the RMSE and R-squared for each of the five folds.\n\n::: {.cell}\n::: {.cell-output-display}\n![Performance metrics for each fold in the 5-fold cross validation. We can see that due to sampling variation, there is a difference between the measured performance for each fold.](index_files/figure-html/performance-folds-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# To compare between models, we have as the id column the fold under consideration.\n# each column then corresponds to a model with the same metric.\nfit <- results_df %>%\n  select(id = fold, model = wflow_id, rmse) %>%\n  pivot_wider(names_from = model, values_from = rmse) %>%\n  tidyposterior::perf_mod(\n    formula = statistic ~ model + (1 | id), \n        transform=tidyposterior::ln_trans,\n    prior_intercept = rstanarm::student_t(df = 1)\n  )\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nFigure \\@ref(fig:posterior-performance) (left) shows the posterior distribution of the RMSE for the two linear regression models applied to the simulated dataset. Figure \\@ref(fig:posterior-performance) (right) shows the posterior difference between the estimated RMSE for the linear regression model specified with the known data generating process, compared to the linear regression model without polynomial terms. There is 95% probability that the RMSE of the model which uses the known data generating process is 0.61 smaller than linear regression model specified without polynomial terms.\n\n::: {.cell}\n::: {.cell-output-display}\n![Posterior predictive distributions for the performance of the the regression models. (Left) RMSE for each model. (Right) Difference in the RMSE for the two linear regression models.](index_files/figure-html/posterior-performance-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}