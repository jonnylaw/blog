{
  "hash": "f3f887593133f1a542ba04a47e49cea0",
  "result": {
    "markdown": "---\ntitle: Bayesian Linear Regression with Gibbs Sampling in R\nauthor: Jonny Law\ndate: '2019-06-14'\nslug: bayesian-linear-regression-gibbs\ncategories: \n  - [R, Bayesian]\n---\n\n\n\n\nLinear regression models are commonly used to explain relationships between predictor variables and outcome variables. The data consists of pairs of independent observations $(y_i, x_i)$ where $y_i \\in \\mathbb{R}$ represents the outcome variable of the $i^\\text{th}$ observation and $x_i \\in \\mathbb{R}^m$ represents the predictors (or covariates) of the $i^\\text{th}$ observation. The specification for this model is:\n\n\n$$y_i = \\alpha + x_i^T\\beta + \\varepsilon_i, \\quad \\varepsilon_i \\sim \\mathcal{N}(0, \\sigma^2).$$\n\nThe parameters of the model include the intercept (or overall mean) $\\alpha \\in \\mathbb{R}$, the coefficients of the predictor variables, $\\beta \\in \\mathbb{R}^m$ is a $m \\times 1$ column vector and the standard deviation of the un-modelled noise, $\\sigma \\in \\mathbb{R}$. \n\n## The Model as a Data Generating Process\n\nIn order to manufacture a deeper understand of linear regression it is useful to explore the model as a data generating process. This allows us to understand when linear regression is applicable, how to effectively perform parameter inference and how to assess the model fit. If the model is suitable for the application, then synthetic data from the model with appropriately chosen parameters should be indistinguishable from real observed data. The parameters used to generate the simulated data are known and hence inference algorithms should be able to reliably recover these parameters using the simulated data.\n\nFirst consider a simple linear regression (a regression where there is only one predictor variable) which links height to weight. We assume that height will be of adults and measured in cm. This is a continuous variable and we might think that this could be modelled using a Normal distribution with a mean of $150$ and a standard deviation of $20$. Let's simulate some values: \n\n::: {.cell}\n\n```{.r .cell-code}\nheights <- rnorm(100, mean = 150, sd = 20)\nqplot(heights, geom = \"histogram\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\nWe have simulated 100 heights and plotted them on a histogram. The tallest adults are 200cm and the smallest are 100cm. Now that we have our heights, it remains to choose a suitable value for the parameter $\\alpha$ which will be the intercept and the coefficient $\\beta$ which will be multiplied by height to determine the weight in kilograms. In addition, a value of the unmodelled noise $\\sigma$ must be chosen, this seems reasonable since we know that other factors apart from height determine an individuals weight.\n\n::: {.cell}\n\n```{.r .cell-code}\nalpha <- 60\nbeta <- 0.3\nsigma <- 5\nweights <- purrr::map_dbl(heights, ~ rnorm(1, mean = alpha + beta * ., sd = sigma))\nqplot(weights, geom = \"histogram\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\nFor every height, we have simulated an associated weight using [purrrs](https://purrr.tidyverse.org) `map_dbl`. We can plot the height against the weight and see that there is a generally increasing trend, this is expected since our chosen value of the coefficient $\\beta = 0.5$. \n\n::: {.cell}\n\n```{.r .cell-code}\nqplot(heights, weights)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\nWhen performing an applied analysis in a business context, it might be tempting to stop here after plotting the relationship between height and weight. However these heights and weights are only a sample of a population - we wish to make statements which pertain to the entire population. If we consider the sample representative of the population then a properly fitted statistical model will allow us to make statements about the population which this sample is drawn from. As an example of a common business problem, this could include sales of a product - we wish to make statements about future sales which we can't possibly have seen and hence a statistical model is important.\n\n## Fitting the model\n\nA parametric model is described by a distribution $p(y|\\theta)$ where $y$ represents the observed data and $\\theta$ represents the parameters. These parameters are unknown, but  represent properties of the model. The distribution of the observed data is controlled by the values of the parameters, $\\theta$. The goal of Bayesian inference is to learn which values of the parameters are consistent with the observed data. The parameters are unknown and can't be determined precisely, however the more data collected the more accurate the posterior inferences can be. \n\nIn the Bayesian paradigm, the parameters also have a distribution. Before the data is observed, this is referred to as the prior distribution $p(\\theta)$ which can incorporate the hypothesis of the analyst. The goal is to determine the posterior distribution of the parameters given the observed data, this can be achieved using Bayes theorem:\n\n$p(\\theta|y) = \\frac{p(\\theta)p(y|\\theta)}{\\int_\\theta p(\\theta)p(y|\\theta)d\\theta}$\n\nThe likelihood for linear regression with $n$ univariate observations, $\\textbf{y} = y_1,\\dots,y_n$ is written as\n\n$$p(\\textbf{y}|\\psi) = \\prod_{i=1}^n\\mathcal{N}(\\alpha + x_i^T\\beta, \\tau),$$\n\n\nnote that the likelihood is parameterised in terms of the precision $\\tau = \\frac{1}{\\sigma^2}$. Standard prior distributions for simple linear regression are chosen to be\n\n\n$$\\begin{align*}\np(\\tau) &= \\textrm{Gamma}(\\alpha_\\sigma, \\beta_\\sigma), \\\\\np(\\alpha) &= \\mathcal{N}(\\mu_\\alpha, \\sigma^2_\\alpha), \\\\\np(\\beta) &= \\mathcal{N}(\\mu_\\beta, \\sigma^2_\\beta).\n\\end{align*}$$\n\n### Gibbs Sampling\n\nGibbs sampling works by alternately sampling from the conditional conjugate distribution. It can often be faster for models which are specified using the conjugate structure, however the choice of prior distribution is not flexible (but the parameterisation is). The algebra below is not required to implement a Gibbs sampling algorithm as there are probabilistic programming languages such as BUGS and JAGS which work out the required maths.\n\nUsing the likelihood and priors from the section above we can derive the conditionally conjugate posterior distributions:\n\n$$\\begin{align*}\n\np(\\tau|\\textbf{y}, \\textbf{x}, \\beta, \\alpha) &= p(\\tau)\\prod_{i=1}^np(y_i|\\psi), \\\\\n&= \\textrm{Gamma}(\\tau|\\alpha_\\sigma, \\beta_\\sigma)\\prod_{i=1}^n\\mathcal{N}(y_i|\\alpha + x_i^T\\beta, \\sigma^2), \\\\\n&\\propto \\tau^{\\alpha_\\tau-1}e^{-\\beta_\\tau\\tau}\\tau^{\\frac{n}{2}}\\exp\\left\\{-\\frac{\\tau}{2}\\sum_{i=1}^n(y_i-\\alpha - x_i^T\\beta)^2\\right\\}, \\\\\n&= \\tau^{\\alpha_\\tau-1 + \\frac{n}{2}}\\exp\\left\\{-\\beta_\\tau\\tau-\\frac{\\tau}{2}\\sum_{i=1}^n(y_i-\\alpha - x_i^T\\beta)^2\\right\\},\\\\\n&=\\textrm{Gamma}\\left(\\alpha_\\tau+\\frac{n}{2}, \\beta_\\tau +\\frac{1}{2}\\sum_{i=1}^n(y_i-\\alpha - x_i^T\\beta)^2\\right).\n\\end{align*}$$\n\n\n$$\\begin{align*}\np(\\alpha|\\textbf{y}, \\textbf{x}, \\beta, \\tau) &= \\mathcal{N}(\\alpha|\\mu_\\alpha, \\tau_\\alpha)\\prod_{i=1}^n\\mathcal{N}(y_i|\\alpha + x_i^T \\beta, \\tau), \\\\\n&\\propto \\tau^{\\frac{1}{2}}_\\alpha\\exp\\left\\{-\\frac{\\tau_\\alpha}{2}(\\alpha-\\mu_\\alpha)^2\\right\\}\\tau^\\frac{n}{2}\\exp\\left\\{-\\frac{\\tau}{2}\\sum_{i=1}^n(y_i-\\alpha-x_i^T \\beta)^2\\right\\}, \\\\\n&= \\exp\\left\\{-\\frac{\\tau_\\alpha}{2}(\\alpha-\\mu_\\alpha)^2-\\frac{\\tau}{2}\\sum_{i=1}^n(y_i-\\alpha-x_i^T \\beta)^2\\right\\}, \\\\\n&= \\exp \\left\\{ -\\frac{1}{2}\\left(\\alpha^2(\\tau_\\alpha + n\\tau) + \\alpha(-2\\tau_\\alpha\\mu_\\alpha - 2\\tau\\sum_{i=1}^n (y_i - x_i^T \\beta)) \\right) + C \\right\\}, \\\\\n&= \\mathcal{N}\\left((\\tau_\\alpha + n\\tau)^{-1}\\left(\\tau_\\alpha + \\tau\\sum_{i=1}^n (y_i - x_i^T \\beta)\\right), \\tau_\\alpha + n\\tau\\right).\n\\end{align*}$$\n\n$$\\begin{align*}\n\np(\\beta|\\textbf{y}, \\textbf{x}, \\alpha, \\tau) &= \\mathcal{N}(\\beta|\\mu_\\beta, \\tau_\\beta)\\prod_{i=1}^n\\mathcal{N}(y_i|\\alpha + x_i^T \\beta, \\tau), \\\\\n&\\propto \\tau^{\\frac{1}{2}}_\\beta\\exp\\left\\{-\\frac{\\tau_\\beta}{2}(\\beta-\\mu_\\beta)^2\\right\\}\\tau^\\frac{n}{2}\\exp\\left\\{-\\frac{\\tau}{2}\\sum_{i=1}^n(y_i-\\alpha-x_i^T \\beta)^2\\right\\}, \\\\\n&= \\exp\\left\\{-\\frac{\\tau_\\beta}{2}(\\beta-\\mu_\\beta)^2-\\frac{\\tau}{2}\\sum_{i=1}^n(y_i-\\alpha-x_i^T \\beta)^2\\right\\}, \\\\\n&= \\exp \\left\\{ -\\frac{1}{2}\\left(\\beta^2(\\tau_\\beta + \\tau\\sum_{i=1}^nx_i^2) + \\beta(-2\\tau_\\beta\\mu_\\beta - 2\\tau\\sum_{i=1}^n (y_i - \\alpha) x_i) \\right) + C \\right\\}, \\\\\n&= \\mathcal{N}\\left((\\tau_\\beta + \\sum_{i=1}^nx_i^2\\tau)^{-1}\\left(\\tau_\\beta + \\tau\\sum_{i=1}^n (y_i - \\alpha )x_i\\right), \\tau_\\beta + \\tau\\sum_{i=1}^nx_i^2 \\right).\n\\end{align*}$$\n\nThis allows us to construct a Gibbs Sampler for the linear regression model by alternating sampling from the precision, $\\tau$ given the latest value of the coefficient vector $\\beta$ and vice versa. The functions to sample from the conditional posterior distributions are written in `R` as:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_tau <- function(ys, alpha, beta, alpha0, beta0) {\n  rgamma(1,\n    shape = alpha0 + nrow(ys) / 2,\n    rate = beta0 + 0.5 * sum((ys$y - (alpha + as.matrix(ys$x) %*% beta))^2)\n  )\n}\n\nsample_alpha <- function(ys, beta, tau, mu0, tau0) {\n  prec <- tau0 + tau * nrow(ys)\n  mean <- (tau0 + tau * sum(ys$y - as.matrix(ys$x) %*% beta)) / prec\n  rnorm(1, mean = mean, sd = 1 / sqrt(prec))\n}\n\nsample_beta <- function(ys, alpha, tau, mu0, tau0) {\n  prec <- tau0 + tau * sum(ys$x * ys$x)\n  mean <- (tau0 + tau * sum((ys$y - alpha) * ys$x)) / prec\n  rnorm(1, mean = mean, sd = 1 / sqrt(prec))\n}\n```\n:::\n\n\nThen a function which loops through each conditional distribution in turn is defined using the three functions defined above. Each conditional distribution is dependent on the parameter draw made immediately above.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngibbs_sample <- function(ys,\n                         tau0,\n                         alpha0,\n                         beta0,\n                         m,\n                         alpha_tau,\n                         beta_tau,\n                         mu_alpha,\n                         tau_alpha,\n                         mu_beta,\n                         tau_beta) {\n  tau <- numeric(m)\n  alpha <- numeric(m)\n  beta <- numeric(m)\n  tau[1] <- tau0\n  alpha[1] <- alpha0\n  beta[1] <- beta0\n  \n  for (i in 2:m) {\n    tau[i] <-\n      sample_tau(ys, alpha[i - 1], beta[i - 1], alpha_tau, beta_tau)\n    alpha[i] <-\n      sample_alpha(ys, beta[i - 1], tau[i], mu_alpha, tau_alpha)\n    beta[i] <- sample_beta(ys, alpha[i], tau[i], mu_beta, tau_beta)\n  }\n  \n  tibble(iteration = seq_len(m),\n         tau,\n         alpha,\n         beta)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nys <- tibble(y = weights, \n             x = heights)\n```\n:::\n\n::: {.cell hash='index_cache/html/gibbs-sample-lm_4281c34cf7d435c31d976f13a4f7c0c2'}\n\n```{.r .cell-code}\nplan(multiprocess)\niters <- future_map_dfr(\n  .x = 1:2,\n  .f = function(x) gibbs_sample(\n      ys,\n      tau0 = 0.5,\n      alpha0 = 60,\n      beta0 = 0.3,\n      m = 1e4,\n      alpha_tau = 3,\n      beta_tau = 2,\n      mu_alpha = 0,\n      tau_alpha = 0.01,\n      mu_beta = 0,\n      tau_beta = 0.01\n    ),\n  .id = \"chain\"\n)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## Making the Markov chain more efficient\n\nIn order to get this chain to mix better, the predictor (the height, $x$) can be centered by subtracting the mean. This will result in the intercept being higher than when using the untransformed data, since the outcome variable (the weight, $y$) is not transformed. In order to recover the value of the parameter \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngibbs_sample_centered <- function(ys,\n                         tau0,\n                         alpha0,\n                         beta0,\n                         m,\n                         alpha_tau,\n                         beta_tau,\n                         mu_alpha,\n                         tau_alpha,\n                         mu_beta,\n                         tau_beta) {\n  tau <- numeric(m)\n  alpha <- numeric(m)\n  beta <- numeric(m)\n  tau[1] <- tau0\n  alpha[1] <- alpha0\n  beta[1] <- beta0\n  \n  mean_x = mean(ys$x)\n  ys$x = ys$x - mean_x\n\n  for (i in 2:m) {\n    tau[i] <- sample_tau(ys, alpha[i - 1], beta[i - 1], alpha_tau, beta_tau)\n    alpha[i] <- sample_alpha(ys, beta[i - 1], tau[i], mu_alpha, tau_alpha)\n    beta[i] <- sample_beta(ys, alpha[i], tau[i], mu_beta, tau_beta)\n  }\n\n  tibble(\n    iteration = seq_len(m),\n    tau,\n    alpha = alpha - mean_x * beta,\n    beta\n  )\n}\n```\n:::\n\n::: {.cell hash='index_cache/html/centered-iters_15b896be9790148b82f41da0d93a3cc1'}\n\n```{.r .cell-code}\niters_centered <- future_map_dfr(\n  .x = 1:2,\n  .f = function(x) gibbs_sample_centered(\n      ys,\n      tau0 = 0.5,\n      alpha0 = 60,\n      beta0 = 0.3,\n      m = 1e4,\n      alpha_tau = 3,\n      beta_tau = 2,\n      mu_alpha = 0,\n      tau_alpha = 0.01,\n      mu_beta = 0,\n      tau_beta = 0.01\n    ),\n  .id = \"chain\"\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\niters_centered %>% \n  filter(iteration > 1000) %>% \n  gather(key = \"parameter\", value, -chain, -iteration) %>%\n  plot_diagnostics_sim(actual_values)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nThe draws from the Gibbs sampling algorithm are draws from the posterior distribution which can be used to produce summaries required for inference using the linear model. Posterior fitted values, ie. a straight line, can be plotted by sampling pairs of values ($\\alpha, \\beta$) from the MCMC output and plotting them using the equation of a straight line ($y = \\alpha + \\beta x$). This gives an indication of the uncertainty in the parameter estimates.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}